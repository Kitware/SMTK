#=============================================================================
#
#  Copyright (c) Kitware, Inc.
#  All rights reserved.
#  See LICENSE.txt for details.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the above copyright notice for more information.
#
#=============================================================================

""" set_main_controls.py:

This operator accepts as input the parameters describing an OpenFOAM simulation
and generates an OpenFOAM controlsDict dictionary.

"""

import os
import smtk
import smtk.io.vtk
import smtk.mesh
import smtk.model
import smtk.bridge.openfoam


@smtk.model.operator("set main controls", smtk.bridge.openfoam.Session)
class set_main_controls(smtk.model.Operator):

    def __init__(self):
        smtk.model.Operator.__init__(self)

    def name(self):
        return "set main controls"

    def className(self):
        return self.__name__

    def operateInternal(self):

        spec = self.specification()

        itemNames = [
            'application', 'startFrom', 'startTime', 'stopAt', 'endTime', 'deltaT',
                     'writeControl', 'writeInterval', 'purgeWrite', 'writeFormat', 'writePrecision',
                     'timeFormat', 'timePrecision']

        if self.activeSession().workingDirectoryExists() == False:
            self.activeSession().createWorkingDirectory()

        systemDirectory = self.activeSession().workingDirectory() + '/system'
        if not os.path.exists(systemDirectory):
            os.makedirs(systemDirectory)

        with open(systemDirectory + '/controlDict', 'w') as f:
            f.write(
                "/*--------------------------------*- C++ -*----------------------------------*\\\n"
                "| =========                 |                                                 |\n"
                "| \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n"
                "|  \\\\    /   O peration     | Version:  plus                                  |\n"
                "|   \\\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n"
                "|    \\\\/     M anipulation  |                                                 |\n"
                "\*---------------------------------------------------------------------------*/\n"
                "\n"
                "/* Generated by SMTK (http://www.computationalmodelbuilder.org/smtk/) */\n"
                "\n"
                "FoamFile\n"
                "{\n"
                "    version     2.0;\n"
                "    format      ascii;\n"
                "    class       dictionary;\n"
                "    object      controlDict;\n"
                "}\n"
                "\n"
                "// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n"
                "\n"
            )
            for itemName in itemNames:
                f.write('%s %s;\n\n' %
                        (itemName, str(spec.find(itemName).value(0))))
            if spec.find('writeCompression').isEnabled():
                f.write('writeCompression on;\n\n')
            else:
                f.write('writeCompression off;\n\n')
            f.write(
                '// ************************************************************************* //\n')

        result = self.createResult(smtk.model.OPERATION_SUCCEEDED)

        # Return with success
        return result
