#=============================================================================
#
#  Copyright (c) Kitware, Inc.
#  All rights reserved.
#  See LICENSE.txt for details.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the above copyright notice for more information.
#
#=============================================================================

# For Windows builds, we must initialize our python interpreter with
# "Py_NoSiteFlag" enabled. We therefore import it here instead. Since this
# module is usually imported at python's initialization, this should have no
# effect when another python implementation imports smtk.
import site
import sys

__all__ = ('common', 'attribute', 'extension', 'model',
           'mesh', 'io', 'project', 'session', 'simulation', 'task')

appContext = None

def _windows_dll_path():
    import os
    _smtk_python_path = '@SMTK_PYTHON_MODULEDIR@/smtk'
    _smtk_dll_path = '@CMAKE_INSTALL_BINDIR@'
    # Compute the DLL path based on the location of the file and traversing up
    # the installation prefix to append the DLL path.
    _smtk_dll_directory = os.path.dirname(os.path.abspath(__file__))
    # Loop while we have components to remove.
    while _smtk_python_path:
        # Strip a directory away.
        _smtk_python_path = os.path.dirname(_smtk_python_path)
        _smtk_dll_directory = os.path.dirname(_smtk_dll_directory)
    _smtk_dll_directory = os.path.join(_smtk_dll_directory, _smtk_dll_path)
    # We never remove this path; it is required for SMTK to work and there's no
    # scope where we can easily remove the directory again.
    _ = os.add_dll_directory(_smtk_dll_directory)

    # Build tree support.
    try:
        from . import _build_paths

        # Add any paths needed for the build tree.
        for path in _build_paths.paths:
            _ = os.add_dll_directory(path)
    except ImportError:
        # Relocatable install tree (or non-Windows).
        pass


# CPython 3.8 added behaviors which modified the DLL search path on Windows to
# only search "blessed" paths. When importing SMTK, ensure that SMTK's DLLs are
# in this set of "blessed" paths.
if sys.version_info >= (3, 8) and sys.platform == 'win32':
    _windows_dll_path()

def shufflePlugins(pluginList):
    """Reorder plugins so they load in a sane order.
    Until plugin dependencies are supported, this is needed."""
    from pathlib import Path
    from functools import cmp_to_key
    priority = {
        'smtkResourcePlugin': 1,
        'smtkGeometryPlugin': 2,
        'smtkAttributePlugin': 3,
        'smtkOperationPlugin': 4,

        'smtkMeshPlugin': 5,
        'smtkModelPlugin': 6,
        'smtkTaskPlugin': 7,
        'smtkProjectPlugin': 8,
        'smtkGraphPlugin': 9,
        'smtkMarkupPlugin': 10,

        'smtkReadWriteResourceManagerStatePlugin': 11,

        'smtkOpencascadeSessionPlugin': 12,
        'smtkDelaunayPlugin': 13,
        'smtkPolygonSessionPlugin': 14,
        'smtkMeshSessionPlugin': 15,
        'smtkVTKOperationsPlugin': 16,
        'smtkVTKSessionPlugin': 17,

        'smtkViewPlugin': 18,
        'smtkDefaultConfigurationPlugin': 19,

        'smtkQtPlugin': 20,
        'smtkPVServerExtPlugin': 21,
        'smtkPVMeshExtPlugin': 22,
        'smtkPVModelExtPlugin': 23,
        'smtkPQComponentsPlugin': 24,
        'smtkPQReadersPlugin': 25,
        'smtkPQCoreProjectPlugin': 26,
        'smtkPQWidgetsPlugin': 27,
        'smtkPQOperationViewsPlugin': 28,
        'smtkPQMarkupPlugin': 29,
        'smtkPQLegacyOperationsPlugin': 30,
        'smtkPQOperationsPanelPlugin': 31,
        'smtkPQGroupingPlugin': 32,
        'smtkPQGuiComponentsPlugin': 33,
        'smtkPQGuiProjectPlugin': 34,

        'smtkOscillatorSessionPlugin': 35,
    }
    maxpri = 1<<32
    def comparator(path1, path2):
        pt1 = Path(path1)
        pt2 = Path(path2)
        p1 = priority[pt1.stem] if pt1.stem in priority else maxpri
        p2 = priority[pt2.stem] if pt2.stem in priority else maxpri
        if p1 != p2:
            return p1 - p2
        return -1 if path1 < path2 else +1 if path1 > path2 else 0
    result = sorted(pluginList, key=cmp_to_key(comparator))
    return result

def findAvailablePlugins():
    """Search this SMTK installation for plugins, returning their full paths."""
    import os
    import smtk.common
    import smtk.plugin
    pluginList = []
    # Look for plugins relative to the smtk.common python library.
    pluginDir = os.path.join(
        smtk.common.Paths.pathToThisLibrary(),
        'smtk-' + smtk.common.Version.number())
    # Each plugin lives in its own directory and has a name that ends with
    # `Plugin.so` (linux, macos) or `Plugin.dll` (windows).
    ending = 'Plugin.so' if sys.platform != 'win32' else 'Plugin.dll'
    for pluginCheck in [x for x in os.listdir(pluginDir) if os.path.isdir(os.path.join(pluginDir,x))]:
        entries = os.listdir(os.path.join(pluginDir, pluginCheck))
        pluginList += ([os.path.join(pluginDir, pluginCheck, x) for x in entries if x.endswith(ending)])
    return shufflePlugins(pluginList)

def loadedPlugins():
    """Return a list of plugins that have been loaded.
    Note that plugins are only supported via ParaView; if you build
    SMTK without ParaView, this will always return an empty list.
    """
    plugins = []
    try:
        from paraview import servermanager
        pm = servermanager.vtkSMProxyManager.GetProxyManager()
        lm = pm.GetPluginManager()
        info = lm.GetLocalInformation()
        for ii in range(info.GetNumberOfPlugins()):
            name = info.GetPluginName(ii)
            if 'smtk' in name.casefold() and info.GetPluginLoaded(ii):
                plugins += [name]
    except:
        pass
    return plugins

def loadPlugins(pluginList = None):
    """Load all of the provided plugins in pluginList or, if empty, load all available plugins.

    This function returns a list of loaded and a list of skipped plugins.
    Example usage:
        import smtk
        loaded, skipped = smtk.loadPlugins()
        print('Loaded %d / %d plugins' % (len(loaded), len(skipped)))
    """
    skipped = []
    loaded = []
    try:
        from paraview.simple import LoadPlugin
        if pluginList == None:
            pluginList = findAvailablePlugins()
        for plugin in pluginList:
            try:
                LoadPlugin(plugin)
                loaded.append(plugin)
            except:
                skipped.append(plugin)
                # Allow loading a plugin to fail without causing all plugin loads to fail.
                pass
    except:
        pass
    if not pluginList or len(skipped) == len(pluginList):
        print('Unable to load any plugins.')
    elif len(skipped) > 0:
        print('Unable to load %d / %d plugins.' % (len(skipped), len(pluginList)))
    return (loaded, skipped)

def applicationContext():
    """Return an instance of smtk.common.Managers.

    Typically, an application or script will create a single instance of smtk.common.Managers
    and use it to hold all of the application's state (at least as far as SMTK is concerned).
    Inside ParaView-based applications, this is created by client-side plugins and simply
    fetched by this method. For scripts run outside the ParaView, this will create an instance
    for you.
    """
    global appContext
    import smtk.common
    import smtk.plugin
    if appContext == None:
        # If no SMTK plugins are loaded, load all the available plugins
        # If any SMTK plugins are loaded, then load no more (assume the
        # script author knows what he's doing).
        if len(loadedPlugins()) == 0:
            loaded, skipped = loadPlugins()
        # Now get (if running inside ParaView UI) or create (if a script)
        # an smtk.common.Managers object
        try:
            from smtk.extension.paraview.appcomponents import pqSMTKBehavior
            bb = pqSMTKBehavior.instance()
            if bb:
                bb.updateWrapperMap()
                if bb.haveActiveWrapper():
                    appContext = bb.activeWrapperCommonManagers()
        except:
            pass
        if appContext == None:
            # Create a managers instance, then initialize and return it.
            appContext = smtk.common.Managers.create()
            smtk.plugin.registerPluginsTo(appContext)
    return appContext

def read(filenames, context=None):
    """Read in SMTK-formatted files and manage the resulting resources.

    The filenames you pass in may be a single string or an iterable object
    producing string filenames.
    This function is synchronous; it will not return until all the files
    have been read or an error has occurred (in which case an empty list
    will be returned).
    """

    import smtk.operation
    import smtk.attribute
    if context == None:
        context = applicationContext()
    opmgr = context.get('smtk.operation.Manager')
    result = []
    if not opmgr:
        print('ERROR: No operation manager.')
        return result
    reader = opmgr.createOperation('smtk::operation::ReadResource')
    if not reader:
        print('ERROR: Could not create operation to read resources.')
        return result
    if type(filenames) == str:
        filenames = list([filenames])
    fp = reader.parameters().findFile('filename')
    if not fp.setNumberOfValues(len(filenames)):
        print('ERROR: Could not extend reader parameters for %d files' % len(filenames))
        return result
    for ii in range(len(filenames)):
        if not fp.setValue(ii, filenames[ii]):
            print('WARNING: Could not append filename %d "%s".' % (ii, filenames[ii]))
            continue
    rres = reader.operate()
    outcome = rres.findInt('outcome').value()
    if outcome != int(smtk.operation.Operation.SUCCEEDED):
        print('ERROR: Operation failed with outcome %d' % outcome)
        print(reader.log().convertToString())
        return result
    rlist = rres.findResource('resource')
    result = [rlist.value(ii) for ii in range(rlist.numberOfValues())]
    return result

def importPythonOperationsFromModule(module_name):
    """Import all of the python operation classes present in \a module_name."""
    import smtk.operation
    ctxt = applicationContext()
    opMgr = ctxt.get('smtk::operation::Manager')
    if opMgr:
        opMgr.importOperationsFromModule(module_name);

def importPythonOperation(module_name, operation_name):
    """Register the \a operation_name operation from \a module_name."""
    import smtk.operation
    ctxt = applicationContext()
    opMgr = ctxt.get('smtk::operation::Manager')
    if opMgr:
        opMgr.registerOperation(module_name, operation_name);

def wrappingProtocol():
    return 'pybind11'
